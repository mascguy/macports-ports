# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

PortGroup           active_variants 1.1
PortGroup           boost 1.0
PortGroup           cmake 1.1
PortGroup           compiler_blacklist_versions 1.0
PortGroup           github 1.0

github.setup        ukoethe vigra 1-12-1 Version-
github.tarball_from archive
version             [strsed ${github.version} {g/-/./}]
revision            0
categories          graphics
platforms           darwin
license             MIT
maintainers         {gmail.com:benjamin.seppke @BSeppke}
description         Generic Image Processing Library for C++
long_description    VIGRA stands for \"Vision with Generic Algorithms\". \
                    It's a novel computer vision library that puts its \
                    main emphasis on customizable algorithms and data \
                    structures. By using template techniques similar to \
                    those in the C++ Standard Template Library, you can \
                    easily adapt any VIGRA component to the needs of your \
                    application, without thereby giving up execution speed.
homepage            https://ukoethe.github.io/vigra/

checksums           rmd160  2d5eda197a2c194dc49c0b57889b97e43277fd49 \
                    sha256  8836a40a340f96ed2abf53780e883c5bf58002eb182cfccb4255b553ca48db33 \
                    size    34211133

boost.version       1.78
# TODO: Do this automatically via Boost portgroup
cmake.module_path-append \
                    [boost::lib_dir]/cmake

depends_lib-append \
                    port:fftw-3-single \
                    port:hdf5 \
                    path:include/turbojpeg.h:libjpeg-turbo \
                    port:libpng \
                    port:openexr \
                    port:szip \
                    port:tiff \
                    port:zlib

compiler.cxx_standard   2011
configure.args-append \
                    -DOPENEXR_INCLUDE_DIR=${prefix}/libexec/openexr2/include/OpenEXR \
                    -DOPENEXR_ILMIMF_LIBRARY=${prefix}/libexec/openexr2/lib/libIlmImf.dylib \
                    -DOPENEXR_HALF_LIBRARY=${prefix}/libexec/openexr2/lib/libHalf.dylib \
                    -DOPENEXR_IEX_LIBRARY=${prefix}/libexec/openexr2/lib/libIex.dylib \
                    -DOPENEXR_ILMTHREAD_LIBRARY=${prefix}/libexec/openexr2/lib/libIlmThread.dylib \
                    -DOPENEXR_IMATH_LIBRARY=${prefix}/libexec/openexr2/lib/libImath.dylib

# Allow cmake to find MacPorts boost_python library
patchfiles-append   patch-boost_python.diff

# Fix upstream build to only add doc_cpp target when BUILD_DOCS enabled
# TODO: contribute patch to upstream
patchfiles-append   patch-cmake-docs.diff

post-patch {
    reinplace "s|@DOCDIR@|${prefix}/share/doc/${name}|g" ${worksrcpath}/config/vigra-config.in
}

# Some additional parameters for cmake. All other params have already been set by pg cmake
configure.args-append \
                        -DBUILD_DOCS=OFF \
                        -DBUILD_SHARED_LIBS=ON \
                        -DBUILD_TESTS=OFF \
                        -DWITH_OPENEXR=ON \
                        -DWITH_VIGRANUMPY=NO

# recursive template instantiation exceeded maximum depth of 128
configure.cxxflags-append -ftemplate-depth-1024

# The -Os setting causes errors w.r.t. libc++ and clang++. Use -O3 instead
configure.cxxflags-replace -Os -O3

destroot.env-append DESTDIR=${destroot}

post-destroot {
    if {[variant_isset docs]} {
        # move documentation to a unversioned directory
        xinstall -m 755 -d ${destroot}${prefix}/share/doc
        move ${destroot}${prefix}/doc/${name} \
             ${destroot}${prefix}/share/doc/${name}
    }
    # delete whatever is left in the doc directory
    delete ${destroot}${prefix}/doc
}

variant docs description "Build documentation" {}
if {[variant_isset docs]} {
    depends_build-append path:bin/doxygen:doxygen
    depends_skip_archcheck doxygen
} else {
    configure.args-append   -DDOXYGEN_DOT_EXECUTABLE= \
                            -DDOXYGEN_EXECUTABLE=
}

variant valgrind description "Include support for VALGRIND" {}
if {[variant_isset valgrind]} {
    depends_lib-append port:valgrind
} else {
    configure.args-append -DWITH_VALGRIND=NO
}

set py_vers [list 2.7 3.9 3.10 3.11 3.12]

proc py_conflict_list {py_vers py_ver} {
    set py_conf_vers [lsearch -inline -all -not -exact $py_vers $py_ver]
    set conf [list]
    foreach v [string map {. {}} ${py_conf_vers}] {
        lappend conf python${v}
    }
    return ${conf}
}

set active_py ""
foreach py_ver ${py_vers} {
    set py_ver_nodot [string map {. {}} ${py_ver}]
    if { [variant_isset python${py_ver_nodot}] } {
        set active_py ${py_ver}
        set active_py_nodot [string map {. {}} ${py_ver}]
    }
    variant python${py_ver_nodot} conflicts [py_conflict_list ${py_vers} ${py_ver}] \
        description "Also build vigranumpy python ${py_ver} bindings" {
            configure.args-delete  -DWITH_VIGRANUMPY=NO
            configure.args-append  -DPYTHON_EXECUTABLE=${prefix}/bin/python${active_py} \
                                   -DPYTHON_SPHINX=${prefix}/bin/sphinx-build-${active_py}

            depends_build-append   port:py${active_py_nodot}-pytest

            depends_lib-append     port:python${active_py_nodot} \
                                   port:py${active_py_nodot}-numpy \
                                   port:py${active_py_nodot}-packaging \
                                   port:py${active_py_nodot}-sphinx

            require_active_variants [boost::depends_portname] python${active_py_nodot}
        }
}

if { ${active_py} eq "" } {
    # default for boost
    set active_py 3.12
    set active_py_nodot [string map {. {}} ${active_py}]
    default_variants +python${active_py_nodot}
}
